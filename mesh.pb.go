// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesh.proto

package gomesh

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NewTxRequest struct {
	ParentTxid           string   `protobuf:"bytes,1,opt,name=parent_txid,json=parentTxid,proto3" json:"parent_txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewTxRequest) Reset()         { *m = NewTxRequest{} }
func (m *NewTxRequest) String() string { return proto.CompactTextString(m) }
func (*NewTxRequest) ProtoMessage()    {}
func (*NewTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{0}
}

func (m *NewTxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewTxRequest.Unmarshal(m, b)
}
func (m *NewTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewTxRequest.Marshal(b, m, deterministic)
}
func (m *NewTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTxRequest.Merge(m, src)
}
func (m *NewTxRequest) XXX_Size() int {
	return xxx_messageInfo_NewTxRequest.Size(m)
}
func (m *NewTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewTxRequest proto.InternalMessageInfo

func (m *NewTxRequest) GetParentTxid() string {
	if m != nil {
		return m.ParentTxid
	}
	return ""
}

type NewTxResponse struct {
	Txid                 string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewTxResponse) Reset()         { *m = NewTxResponse{} }
func (m *NewTxResponse) String() string { return proto.CompactTextString(m) }
func (*NewTxResponse) ProtoMessage()    {}
func (*NewTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{1}
}

func (m *NewTxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewTxResponse.Unmarshal(m, b)
}
func (m *NewTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewTxResponse.Marshal(b, m, deterministic)
}
func (m *NewTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTxResponse.Merge(m, src)
}
func (m *NewTxResponse) XXX_Size() int {
	return xxx_messageInfo_NewTxResponse.Size(m)
}
func (m *NewTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewTxResponse proto.InternalMessageInfo

func (m *NewTxResponse) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

type RollbackRequest struct {
	Txid                 string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackRequest) Reset()         { *m = RollbackRequest{} }
func (m *RollbackRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackRequest) ProtoMessage()    {}
func (*RollbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{2}
}

func (m *RollbackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackRequest.Unmarshal(m, b)
}
func (m *RollbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackRequest.Marshal(b, m, deterministic)
}
func (m *RollbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackRequest.Merge(m, src)
}
func (m *RollbackRequest) XXX_Size() int {
	return xxx_messageInfo_RollbackRequest.Size(m)
}
func (m *RollbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackRequest proto.InternalMessageInfo

func (m *RollbackRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

type CommitRequest struct {
	Txid                 string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{3}
}

func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

type RollbackResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackResponse) Reset()         { *m = RollbackResponse{} }
func (m *RollbackResponse) String() string { return proto.CompactTextString(m) }
func (*RollbackResponse) ProtoMessage()    {}
func (*RollbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{4}
}

func (m *RollbackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackResponse.Unmarshal(m, b)
}
func (m *RollbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackResponse.Marshal(b, m, deterministic)
}
func (m *RollbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackResponse.Merge(m, src)
}
func (m *RollbackResponse) XXX_Size() int {
	return xxx_messageInfo_RollbackResponse.Size(m)
}
func (m *RollbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackResponse proto.InternalMessageInfo

type CommitResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{5}
}

func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

type ResourceLockedRequest struct {
	Txid                 string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	ResourceManager      string   `protobuf:"bytes,2,opt,name=resource_manager,json=resourceManager,proto3" json:"resource_manager,omitempty"`
	Resource             string   `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Prepare              bool     `protobuf:"varint,4,opt,name=prepare,proto3" json:"prepare,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceLockedRequest) Reset()         { *m = ResourceLockedRequest{} }
func (m *ResourceLockedRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceLockedRequest) ProtoMessage()    {}
func (*ResourceLockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{6}
}

func (m *ResourceLockedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceLockedRequest.Unmarshal(m, b)
}
func (m *ResourceLockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceLockedRequest.Marshal(b, m, deterministic)
}
func (m *ResourceLockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLockedRequest.Merge(m, src)
}
func (m *ResourceLockedRequest) XXX_Size() int {
	return xxx_messageInfo_ResourceLockedRequest.Size(m)
}
func (m *ResourceLockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLockedRequest proto.InternalMessageInfo

func (m *ResourceLockedRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *ResourceLockedRequest) GetResourceManager() string {
	if m != nil {
		return m.ResourceManager
	}
	return ""
}

func (m *ResourceLockedRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ResourceLockedRequest) GetPrepare() bool {
	if m != nil {
		return m.Prepare
	}
	return false
}

type ResourceLockedRespose struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceLockedRespose) Reset()         { *m = ResourceLockedRespose{} }
func (m *ResourceLockedRespose) String() string { return proto.CompactTextString(m) }
func (*ResourceLockedRespose) ProtoMessage()    {}
func (*ResourceLockedRespose) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{7}
}

func (m *ResourceLockedRespose) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceLockedRespose.Unmarshal(m, b)
}
func (m *ResourceLockedRespose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceLockedRespose.Marshal(b, m, deterministic)
}
func (m *ResourceLockedRespose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLockedRespose.Merge(m, src)
}
func (m *ResourceLockedRespose) XXX_Size() int {
	return xxx_messageInfo_ResourceLockedRespose.Size(m)
}
func (m *ResourceLockedRespose) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLockedRespose.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLockedRespose proto.InternalMessageInfo

type ResourceManagerRequest struct {
	ResourceManager      string   `protobuf:"bytes,1,opt,name=resource_manager,json=resourceManager,proto3" json:"resource_manager,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceManagerRequest) Reset()         { *m = ResourceManagerRequest{} }
func (m *ResourceManagerRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceManagerRequest) ProtoMessage()    {}
func (*ResourceManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{8}
}

func (m *ResourceManagerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceManagerRequest.Unmarshal(m, b)
}
func (m *ResourceManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceManagerRequest.Marshal(b, m, deterministic)
}
func (m *ResourceManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceManagerRequest.Merge(m, src)
}
func (m *ResourceManagerRequest) XXX_Size() int {
	return xxx_messageInfo_ResourceManagerRequest.Size(m)
}
func (m *ResourceManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceManagerRequest proto.InternalMessageInfo

func (m *ResourceManagerRequest) GetResourceManager() string {
	if m != nil {
		return m.ResourceManager
	}
	return ""
}

type ResourceManagerCommand struct {
	ConfirmOrCancel      bool     `protobuf:"varint,1,opt,name=confirm_or_cancel,json=confirmOrCancel,proto3" json:"confirm_or_cancel,omitempty"`
	Txid                 string   `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	Resource             string   `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceManagerCommand) Reset()         { *m = ResourceManagerCommand{} }
func (m *ResourceManagerCommand) String() string { return proto.CompactTextString(m) }
func (*ResourceManagerCommand) ProtoMessage()    {}
func (*ResourceManagerCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fb4a916ab9601, []int{9}
}

func (m *ResourceManagerCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceManagerCommand.Unmarshal(m, b)
}
func (m *ResourceManagerCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceManagerCommand.Marshal(b, m, deterministic)
}
func (m *ResourceManagerCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceManagerCommand.Merge(m, src)
}
func (m *ResourceManagerCommand) XXX_Size() int {
	return xxx_messageInfo_ResourceManagerCommand.Size(m)
}
func (m *ResourceManagerCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceManagerCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceManagerCommand proto.InternalMessageInfo

func (m *ResourceManagerCommand) GetConfirmOrCancel() bool {
	if m != nil {
		return m.ConfirmOrCancel
	}
	return false
}

func (m *ResourceManagerCommand) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *ResourceManagerCommand) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func init() {
	proto.RegisterType((*NewTxRequest)(nil), "gomesh.NewTxRequest")
	proto.RegisterType((*NewTxResponse)(nil), "gomesh.NewTxResponse")
	proto.RegisterType((*RollbackRequest)(nil), "gomesh.RollbackRequest")
	proto.RegisterType((*CommitRequest)(nil), "gomesh.CommitRequest")
	proto.RegisterType((*RollbackResponse)(nil), "gomesh.RollbackResponse")
	proto.RegisterType((*CommitResponse)(nil), "gomesh.CommitResponse")
	proto.RegisterType((*ResourceLockedRequest)(nil), "gomesh.ResourceLockedRequest")
	proto.RegisterType((*ResourceLockedRespose)(nil), "gomesh.ResourceLockedRespose")
	proto.RegisterType((*ResourceManagerRequest)(nil), "gomesh.ResourceManagerRequest")
	proto.RegisterType((*ResourceManagerCommand)(nil), "gomesh.ResourceManagerCommand")
}

func init() { proto.RegisterFile("mesh.proto", fileDescriptor_b29fb4a916ab9601) }

var fileDescriptor_b29fb4a916ab9601 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x41, 0xcf, 0xd2, 0x40,
	0x10, 0x4d, 0x11, 0xb1, 0x8e, 0x42, 0x71, 0x22, 0xd0, 0xd4, 0xa0, 0xa4, 0xc4, 0x04, 0x3d, 0x14,
	0xa3, 0x26, 0x9e, 0xbc, 0xc8, 0x55, 0x31, 0x29, 0x9c, 0xbc, 0x34, 0x65, 0xbb, 0x96, 0x06, 0xda,
	0xad, 0xdb, 0xa2, 0xf8, 0x1f, 0xfc, 0x8f, 0xfe, 0x95, 0x2f, 0x6c, 0x77, 0xfb, 0xd1, 0x52, 0xb8,
	0xb1, 0x6f, 0xe6, 0xbd, 0x19, 0xe6, 0xbd, 0x02, 0xc4, 0x34, 0xdb, 0x3a, 0x29, 0x67, 0x39, 0xc3,
	0x4e, 0xc8, 0x4e, 0x2f, 0x7b, 0x0e, 0x4f, 0x97, 0xf4, 0xcf, 0xfa, 0xe8, 0xd2, 0x5f, 0x07, 0x9a,
	0xe5, 0xf8, 0x0a, 0x9e, 0xa4, 0x3e, 0xa7, 0x49, 0xee, 0xe5, 0xc7, 0x28, 0x30, 0xb5, 0x89, 0x36,
	0x7b, 0xec, 0x42, 0x01, 0xad, 0x8f, 0x51, 0x60, 0x4f, 0xa1, 0x2b, 0x09, 0x59, 0xca, 0x92, 0x8c,
	0x22, 0x42, 0xfb, 0xac, 0x55, 0xfc, 0xb6, 0x5f, 0x83, 0xe1, 0xb2, 0xfd, 0x7e, 0xe3, 0x93, 0x9d,
	0x12, 0x6e, 0x6a, 0x9b, 0x42, 0x77, 0xc1, 0xe2, 0x38, 0xca, 0x6f, 0x35, 0x21, 0xf4, 0xef, 0xb5,
	0x8a, 0x99, 0x76, 0x1f, 0x7a, 0x8a, 0x28, 0x91, 0x7f, 0x1a, 0x0c, 0x5c, 0x9a, 0xb1, 0x03, 0x27,
	0xf4, 0x2b, 0x23, 0x3b, 0x1a, 0xdc, 0xd0, 0xc4, 0x37, 0xd0, 0xe7, 0xb2, 0xd9, 0x8b, 0xfd, 0xc4,
	0x0f, 0x29, 0x37, 0x5b, 0xa2, 0x6e, 0x28, 0xfc, 0x5b, 0x01, 0xa3, 0x05, 0xba, 0x82, 0xcc, 0x07,
	0xa2, 0xa5, 0x7c, 0xa3, 0x09, 0x8f, 0x52, 0x4e, 0x4f, 0xc7, 0x31, 0xdb, 0x13, 0x6d, 0xa6, 0xbb,
	0xea, 0x69, 0x8f, 0x2e, 0xb7, 0xc9, 0x52, 0x96, 0x51, 0x7b, 0x01, 0x43, 0xb7, 0x3a, 0x41, 0xed,
	0xd9, 0xb4, 0x93, 0xd6, 0xb8, 0x93, 0x9d, 0x5f, 0x88, 0x9c, 0xae, 0xe1, 0x27, 0x01, 0xbe, 0x85,
	0x67, 0x84, 0x25, 0x3f, 0x23, 0x1e, 0x7b, 0x8c, 0x7b, 0xc4, 0x4f, 0x08, 0xdd, 0x0b, 0x15, 0xdd,
	0x35, 0x64, 0xe1, 0x3b, 0x5f, 0x08, 0xb8, 0x3c, 0x4c, 0xeb, 0xec, 0x30, 0x37, 0xfe, 0xed, 0xfb,
	0xff, 0x2d, 0x80, 0x35, 0x21, 0x2b, 0xca, 0x7f, 0x47, 0x84, 0xe2, 0x47, 0x78, 0x28, 0x82, 0x80,
	0xcf, 0x9d, 0x22, 0x4b, 0xce, 0x79, 0x90, 0xac, 0x41, 0x0d, 0x95, 0x69, 0xf9, 0x0c, 0xba, 0x72,
	0x13, 0x47, 0xaa, 0xa5, 0x96, 0x15, 0xcb, 0xbc, 0x2c, 0x48, 0xfa, 0x27, 0xe8, 0x14, 0xc6, 0x63,
	0xa9, 0x5f, 0x49, 0x90, 0x35, 0xac, 0xc3, 0x92, 0xb8, 0x84, 0x5e, 0xd5, 0x10, 0x1c, 0x97, 0x43,
	0x9a, 0x62, 0x63, 0x5d, 0x2d, 0x0b, 0x1f, 0x71, 0x05, 0x46, 0xcd, 0x02, 0x7c, 0x59, 0x67, 0x54,
	0x0d, 0xb6, 0xae, 0xd5, 0xa5, 0x77, 0xef, 0xb4, 0x2f, 0xe3, 0x1f, 0x2f, 0xc2, 0x28, 0xdf, 0x1e,
	0x36, 0x0e, 0x61, 0xf1, 0x3c, 0xf8, 0x9b, 0xf8, 0x71, 0x44, 0x42, 0x36, 0x2f, 0x78, 0x9b, 0x8e,
	0xf8, 0x74, 0x3f, 0xdc, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x2b, 0x13, 0x8e, 0xc8, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TccServiceClient is the client API for TccService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TccServiceClient interface {
	NewTx(ctx context.Context, in *NewTxRequest, opts ...grpc.CallOption) (*NewTxResponse, error)
	Rollback(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	ResourceLocked(ctx context.Context, in *ResourceLockedRequest, opts ...grpc.CallOption) (*ResourceLockedRespose, error)
	ResourceManager(ctx context.Context, in *ResourceManagerRequest, opts ...grpc.CallOption) (TccService_ResourceManagerClient, error)
}

type tccServiceClient struct {
	cc *grpc.ClientConn
}

func NewTccServiceClient(cc *grpc.ClientConn) TccServiceClient {
	return &tccServiceClient{cc}
}

func (c *tccServiceClient) NewTx(ctx context.Context, in *NewTxRequest, opts ...grpc.CallOption) (*NewTxResponse, error) {
	out := new(NewTxResponse)
	err := c.cc.Invoke(ctx, "/gomesh.TccService/NewTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccServiceClient) Rollback(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error) {
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, "/gomesh.TccService/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/gomesh.TccService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccServiceClient) ResourceLocked(ctx context.Context, in *ResourceLockedRequest, opts ...grpc.CallOption) (*ResourceLockedRespose, error) {
	out := new(ResourceLockedRespose)
	err := c.cc.Invoke(ctx, "/gomesh.TccService/ResourceLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccServiceClient) ResourceManager(ctx context.Context, in *ResourceManagerRequest, opts ...grpc.CallOption) (TccService_ResourceManagerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TccService_serviceDesc.Streams[0], "/gomesh.TccService/ResourceManager", opts...)
	if err != nil {
		return nil, err
	}
	x := &tccServiceResourceManagerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TccService_ResourceManagerClient interface {
	Recv() (*ResourceManagerCommand, error)
	grpc.ClientStream
}

type tccServiceResourceManagerClient struct {
	grpc.ClientStream
}

func (x *tccServiceResourceManagerClient) Recv() (*ResourceManagerCommand, error) {
	m := new(ResourceManagerCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TccServiceServer is the server API for TccService service.
type TccServiceServer interface {
	NewTx(context.Context, *NewTxRequest) (*NewTxResponse, error)
	Rollback(context.Context, *RollbackRequest) (*RollbackResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	ResourceLocked(context.Context, *ResourceLockedRequest) (*ResourceLockedRespose, error)
	ResourceManager(*ResourceManagerRequest, TccService_ResourceManagerServer) error
}

func RegisterTccServiceServer(s *grpc.Server, srv TccServiceServer) {
	s.RegisterService(&_TccService_serviceDesc, srv)
}

func _TccService_NewTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServiceServer).NewTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomesh.TccService/NewTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServiceServer).NewTx(ctx, req.(*NewTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomesh.TccService/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServiceServer).Rollback(ctx, req.(*RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomesh.TccService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccService_ResourceLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceLockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServiceServer).ResourceLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gomesh.TccService/ResourceLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServiceServer).ResourceLocked(ctx, req.(*ResourceLockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccService_ResourceManager_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResourceManagerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TccServiceServer).ResourceManager(m, &tccServiceResourceManagerServer{stream})
}

type TccService_ResourceManagerServer interface {
	Send(*ResourceManagerCommand) error
	grpc.ServerStream
}

type tccServiceResourceManagerServer struct {
	grpc.ServerStream
}

func (x *tccServiceResourceManagerServer) Send(m *ResourceManagerCommand) error {
	return x.ServerStream.SendMsg(m)
}

var _TccService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gomesh.TccService",
	HandlerType: (*TccServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTx",
			Handler:    _TccService_NewTx_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _TccService_Rollback_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _TccService_Commit_Handler,
		},
		{
			MethodName: "ResourceLocked",
			Handler:    _TccService_ResourceLocked_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ResourceManager",
			Handler:       _TccService_ResourceManager_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mesh.proto",
}
